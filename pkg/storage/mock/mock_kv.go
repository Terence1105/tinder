// Code generated by MockGen. DO NOT EDIT.
// Source: kv.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	dto "github.com/Terence1105/Tinder/pkg/storage/redis/tinder/dto"
	gomock "github.com/golang/mock/gomock"
)

// MockTinderStorage is a mock of TinderStorage interface.
type MockTinderStorage struct {
	ctrl     *gomock.Controller
	recorder *MockTinderStorageMockRecorder
}

// MockTinderStorageMockRecorder is the mock recorder for MockTinderStorage.
type MockTinderStorageMockRecorder struct {
	mock *MockTinderStorage
}

// NewMockTinderStorage creates a new mock instance.
func NewMockTinderStorage(ctrl *gomock.Controller) *MockTinderStorage {
	mock := &MockTinderStorage{ctrl: ctrl}
	mock.recorder = &MockTinderStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTinderStorage) EXPECT() *MockTinderStorageMockRecorder {
	return m.recorder
}

// AddPerson mocks base method.
func (m *MockTinderStorage) AddPerson(ctx context.Context, person *dto.Person) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPerson", ctx, person)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPerson indicates an expected call of AddPerson.
func (mr *MockTinderStorageMockRecorder) AddPerson(ctx, person interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPerson", reflect.TypeOf((*MockTinderStorage)(nil).AddPerson), ctx, person)
}

// DecrementDateCount mocks base method.
func (m *MockTinderStorage) DecrementDateCount(ctx context.Context, name string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecrementDateCount", ctx, name)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecrementDateCount indicates an expected call of DecrementDateCount.
func (mr *MockTinderStorageMockRecorder) DecrementDateCount(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecrementDateCount", reflect.TypeOf((*MockTinderStorage)(nil).DecrementDateCount), ctx, name)
}

// GetDateCount mocks base method.
func (m *MockTinderStorage) GetDateCount(ctx context.Context, name string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDateCount", ctx, name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDateCount indicates an expected call of GetDateCount.
func (mr *MockTinderStorageMockRecorder) GetDateCount(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDateCount", reflect.TypeOf((*MockTinderStorage)(nil).GetDateCount), ctx, name)
}

// GetPeople mocks base method.
func (m *MockTinderStorage) GetPeople(ctx context.Context, min, max float64, count, gender int) ([]dto.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPeople", ctx, min, max, count, gender)
	ret0, _ := ret[0].([]dto.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPeople indicates an expected call of GetPeople.
func (mr *MockTinderStorageMockRecorder) GetPeople(ctx, min, max, count, gender interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPeople", reflect.TypeOf((*MockTinderStorage)(nil).GetPeople), ctx, min, max, count, gender)
}

// RemovePerson mocks base method.
func (m *MockTinderStorage) RemovePerson(ctx context.Context, name string, gender int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePerson", ctx, name, gender)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemovePerson indicates an expected call of RemovePerson.
func (mr *MockTinderStorageMockRecorder) RemovePerson(ctx, name, gender interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePerson", reflect.TypeOf((*MockTinderStorage)(nil).RemovePerson), ctx, name, gender)
}
